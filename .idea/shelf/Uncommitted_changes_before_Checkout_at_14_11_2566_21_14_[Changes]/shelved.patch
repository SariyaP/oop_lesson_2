Index: data_processing.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import csv, os\r\n\r\n__location__ = os.path.realpath(\r\n    os.path.join(os.getcwd(), os.path.dirname(__file__)))\r\n\r\ncities = []\r\nwith open(os.path.join(__location__, 'Cities.csv')) as f:\r\n    rows = csv.DictReader(f)\r\n    for r in rows:\r\n        cities.append(dict(r))\r\n\r\ncountries = []\r\nwith open(os.path.join(__location__, 'Countries.csv')) as f:\r\n    rows = csv.DictReader(f)\r\n    for r in rows:\r\n        countries.append(dict(r))\r\n\r\nplayers = []\r\nwith open(os.path.join(__location__, 'Players.csv')) as f:\r\n    rows = csv.DictReader(f)\r\n    for r in rows:\r\n        players.append(dict(r))\r\n\r\nteams = []\r\nwith open(os.path.join(__location__, 'Teams.csv')) as f:\r\n    rows = csv.DictReader(f)\r\n    for r in rows:\r\n        teams.append(dict(r))\r\n\r\ntitanic = []\r\nwith open(os.path.join(__location__, 'Titanic.csv')) as f:\r\n    rows = csv.DictReader(f)\r\n    for r in rows:\r\n        titanic.append(dict(r))\r\n\r\nclass DB:\r\n    def __init__(self):\r\n        self.database = []\r\n\r\n    def insert(self, table):\r\n        self.database.append(table)\r\n\r\n    def search(self, table_name):\r\n        for table in self.database:\r\n            if table.table_name == table_name:\r\n                return table\r\n        return None\r\n    \r\nimport copy\r\nclass Table:\r\n    def __init__(self, table_name, table):\r\n        self.table_name = table_name\r\n        self.table = table\r\n    \r\n    def join(self, other_table, common_key):\r\n        joined_table = Table(self.table_name + '_joins_' + other_table.table_name, [])\r\n        for item1 in self.table:\r\n            for item2 in other_table.table:\r\n                if item1[common_key] == item2[common_key]:\r\n                    dict1 = copy.deepcopy(item1)\r\n                    dict2 = copy.deepcopy(item2)\r\n                    dict1.update(dict2)\r\n                    joined_table.table.append(dict1)\r\n        return joined_table\r\n    \r\n    def filter(self, condition):\r\n        filtered_table = Table(self.table_name + '_filtered', [])\r\n        for item1 in self.table:\r\n            if condition(item1):\r\n                filtered_table.table.append(item1)\r\n        return filtered_table\r\n    \r\n    def aggregate(self, function, aggregation_key):\r\n        temps = []\r\n        for item1 in self.table:\r\n            temps.append(float(item1[aggregation_key]))\r\n        return function(temps)\r\n    \r\n    def select(self, attributes_list):\r\n        temps = []\r\n        for item1 in self.table:\r\n            dict_temp = {}\r\n            for key in item1:\r\n                if key in attributes_list:\r\n                    dict_temp[key] = item1[key]\r\n            temps.append(dict_temp)\r\n        return temps\r\n\r\n    def __str__(self):\r\n        return self.table_name + ':' + str(self.table)\r\n\r\n\r\ntable1 = Table('cities', cities)\r\ntable2 = Table('countries', countries)\r\ntable3 = Table('players', players)\r\ntable4 = Table('teams', teams)\r\ntable5 = Table('titanic', titanic)\r\nmy_DB = DB()\r\nmy_DB.insert(table1)\r\nmy_DB.insert(table2)\r\nmy_DB.insert(table3)\r\nmy_DB.insert(table4)\r\nmy_DB.insert(table5)\r\nmy_table1 = my_DB.search('cities')\r\nmy_table3 = my_DB.search('players')\r\nmy_table4 = my_DB.search('teams')\r\nmy_table5 = my_DB.search('titanic')\r\n\r\n# What player on a team with “ia” in the team name\r\n# played less than 200 minutes and made more than 100 passes?\r\n# Select to display the player surname, team, and position\r\nmy_table3_filtered = my_table3.filter(lambda x: 'ia' in x['team']).filter(lambda x: float(x['minutes']) < 200).\\\r\n    filter(lambda x: float(x['passes']) > 100)\r\nfor i in my_table3_filtered.table:\r\n    print(f\"Name: {i['surname']:<13} Team: {i['team']:<10} Position: {i['position']:<10}\")\r\nprint()\r\n\r\n# The average number of games played for teams ranking below 10 versus teams ranking above or equal 10\r\nmy_table4_filtered1 = my_table4.filter(lambda x: int(x['ranking']) < 10)\r\nprint(f\"Average number of game (ranking below 10): \"\r\n      f\"{my_table4_filtered1.aggregate(lambda x: sum(x)/len(x), 'games'):.2f}\")\r\nmy_table4_filtered2 = my_table4.filter(lambda x: int(x['ranking']) >= 10)\r\nprint(f\"Average number of game (ranking above or equal 10): \"\r\n      f\"{my_table4_filtered2.aggregate(lambda x: sum(x)/len(x), 'games'):.2f}\")\r\nprint()\r\n\r\n# The average number of passes made by forwards versus by midfielders\r\nmy_table3_filtered1 = my_table3.filter(lambda x: x['position'] == 'forward')\r\nprint(f\"Average number of passes made by forwards: \"\r\n      f\"{my_table3_filtered1.aggregate(lambda x: sum(x)/len(x), 'passes'):.2f}\")\r\nmy_table3_filtered2 = my_table3.filter(lambda x: x['position'] == 'midfielder')\r\nprint(f\"Average number of passes made by midfielders: \"\r\n      f\"{my_table3_filtered2.aggregate(lambda x: sum(x)/len(x), 'passes'):.2f}\")\r\nprint()\r\n\r\n# The average fare paid by passengers in the first class versus in the third class\r\nmy_table5_filtered1 = my_table5.filter(lambda x: x['class'] == '1')\r\nprint(f\"Average fare paid by passengers in the first class: \"\r\n      f\"{my_table5_filtered1.aggregate(lambda x: sum(x)/len(x), 'fare'):.2f}\")\r\nmy_table5_filtered2 = my_table5.filter(lambda x: x['class'] == '3')\r\nprint(f\"Average fare paid by passengers in the third class: \"\r\n      f\"{my_table5_filtered2.aggregate(lambda x: sum(x)/len(x), 'fare'):.2f}\")\r\nprint()\r\n\r\n# The survival rate of male versus female passengers\r\nmy_table5_filteredMy = my_table5.filter(lambda x: x['gender'] == 'M').filter(lambda x: x['survived'] == 'yes')\r\nmy_table5_filteredMn = my_table5.filter(lambda x: x['gender'] == 'M')\r\nprint(f\"The survival rate of male: \"\r\n      f\"{len(my_table5_filteredMy.table)/len(my_table5_filteredMn.table):.2f}\")\r\nmy_table5_filteredFy = my_table5.filter(lambda x: x['gender'] == 'F').filter(lambda x: x['survived'] == 'yes')\r\nmy_table5_filteredFn = my_table5.filter(lambda x: x['gender'] == 'F')\r\nprint(f\"The survival rate of female: \"\r\n      f\"{len(my_table5_filteredFy.table)/len(my_table5_filteredFn.table):.2f}\")\r\n\r\n# print(\"Test filter: only filtering out cities in Italy\")\r\n# my_table1_filtered = my_table1.filter(lambda x: x['country'] == 'Italy')\r\n# print(my_table1_filtered)\r\n# print()\r\n#\r\n# print(\"Test select: only displaying two fields, city and latitude, for cities in Italy\")\r\n# my_table1_selected = my_table1_filtered.select(['city', 'latitude'])\r\n# print(my_table1_selected)\r\n# print()\r\n#\r\n# print(\"Calculting the average temperature without using aggregate for cities in Italy\")\r\n# temps = []\r\n# for item in my_table1_filtered.table:\r\n#     temps.append(float(item['temperature']))\r\n# print(sum(temps)/len(temps))\r\n# print()\r\n#\r\n# print(\"Calculting the average temperature using aggregate for cities in Italy\")\r\n# print(my_table1_filtered.aggregate(lambda x: sum(x)/len(x), 'temperature'))\r\n# print()\r\n#\r\n# print(\"Test join: finding cities in non-EU countries whose temperatures are below 5.0\")\r\n# my_table2 = my_DB.search('countries')\r\n# my_table3 = my_table1.join(my_table2, 'country')\r\n# my_table3_filtered = my_table3.filter(lambda x: x['EU'] == 'no').filter(lambda x: float(x['temperature']) < 5.0)\r\n# print(my_table3_filtered.table)\r\n# print()\r\n# print(\"Selecting just three fields, city, country, and temperature\")\r\n# print(my_table3_filtered.select(['city', 'country', 'temperature']))\r\n# print()\r\n#\r\n# print(\"Print the min and max temperatures for cities in EU that do not have coastlines\")\r\n# my_table3_filtered = my_table3.filter(lambda x: x['EU'] == 'yes').filter(lambda x: x['coastline'] == 'no')\r\n# print(\"Min temp:\", my_table3_filtered.aggregate(lambda x: min(x), 'temperature'))\r\n# print(\"Max temp:\", my_table3_filtered.aggregate(lambda x: max(x), 'temperature'))\r\n# print()\r\n#\r\n# print(\"Print the min and max latitude for cities in every country\")\r\n# for item in my_table2.table:\r\n#     my_table1_filtered = my_table1.filter(lambda x: x['country'] == item['country'])\r\n#     if len(my_table1_filtered.table) >= 1:\r\n#         print(item['country'], my_table1_filtered.aggregate(lambda x: min(x), 'latitude'), my_table1_filtered.aggregate(lambda x: max(x), 'latitude'))\r\n# print()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data_processing.py b/data_processing.py
--- a/data_processing.py	
+++ b/data_processing.py	
@@ -62,7 +62,16 @@
                     dict1.update(dict2)
                     joined_table.table.append(dict1)
         return joined_table
-    
+
+    def __is_float(self, element):
+        if element is None:
+            return False
+        try:
+            float(element)
+            return True
+        except ValueError:
+            return False
+
     def filter(self, condition):
         filtered_table = Table(self.table_name + '_filtered', [])
         for item1 in self.table:
@@ -73,7 +82,10 @@
     def aggregate(self, function, aggregation_key):
         temps = []
         for item1 in self.table:
-            temps.append(float(item1[aggregation_key]))
+            if self.__is_float(item1[aggregation_key]):
+                temps.append(float(item1[aggregation_key]))
+            else:
+                temps.append(item1[aggregation_key])
         return function(temps)
     
     def select(self, attributes_list):
@@ -152,6 +164,7 @@
 print(f"The survival rate of female: "
       f"{len(my_table5_filteredFy.table)/len(my_table5_filteredFn.table):.2f}")
 
+
 # print("Test filter: only filtering out cities in Italy")
 # my_table1_filtered = my_table1.filter(lambda x: x['country'] == 'Italy')
 # print(my_table1_filtered)
